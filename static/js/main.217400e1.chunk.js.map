{"version":3,"sources":["components/Wrapper/Wrapper.module.scss","components/UserCard/UserCard.module.scss","components/Header/Header.module.scss","components/Wrapper/Wrapper.js","components/Header/Header.js","components/UserCard/UserCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Wrapper","props","className","StylesWrapper","wrapper","children","Header","componentDidMount","getColorStateFromStorage","localStorage","getItem","isColorStateTrue","isCitiesStateTrue","setState","btnColorState","btnCitiesState","this","filterColorState","state","filterCitiesState","handleBtnColorClick","setItem","handleBtnCitiesClick","btnColorClassName","StylesHeader","navigation__item","navigation__item_active","btnCitiesClassName","navigation__container","onClick","Component","UserCard","axios","get","then","response","originalData","data","results","isDataFetched","catch","error","errorMessage","componentDidUpdate","prevProps","prevState","undefined","isColorSelected","getAgeGreen","filter","el","dob","age","getAgeBlue","getAgeRed","sortedDataByColor","concat","isCitiesSelected","sortData","sort","a","b","location","city","sortedDataByCity","dataSource","StylesUserCard","container","length","slice","map","user","key","bgColor","bg__red","bg__green","bg__blue","card__container","card__item","src","picture","large","alt","name","first","last","card__desc","title","postcode","card__email","email","App","handleColorStateChange","handleCitiesStateChange","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,QAAU,2B,kBCA5BD,EAAOC,QAAU,CAAC,UAAY,4BAA4B,gBAAkB,kCAAkC,WAAa,6BAA6B,WAAa,6BAA6B,YAAc,8BAA8B,QAAU,0BAA0B,UAAY,4BAA4B,SAAW,6B,sDCArUD,EAAOC,QAAU,CAAC,sBAAwB,sCAAsC,iBAAmB,iCAAiC,wBAA0B,0C,8ICQ/IC,EANC,SAACC,GAAD,OACd,0BAAMC,UAAS,UAAKC,IAAcC,UAC/BH,EAAMI,W,gBC2EIC,E,kDA3Eb,WAAYL,GAAQ,IAAD,8BACjB,cAAMA,IAQRM,kBAAoB,WAClB,IAAIC,EAA2BC,aAAaC,QAAQ,cAEhDC,EAAiD,SAA7BH,EACpBI,EAAmD,SAFvBH,aAAaC,QAAQ,aAIpB,OAA7BF,GACF,EAAKK,SAAS,CACZC,cAAeH,EACfI,eAAgBH,IACf,WACCI,KAAKf,MAAMgB,iBAAiBD,KAAKE,MAAMJ,eACvCE,KAAKf,MAAMkB,kBAAkBH,KAAKE,MAAMH,oBArB7B,EA0BnBK,oBAAsB,WACpB,EAAKP,SAAS,CACVC,eAAgB,EAAKI,MAAMJ,gBAC1B,WACDE,KAAKf,MAAMgB,iBAAiBD,KAAKE,MAAMJ,eACvCL,aAAaY,QAAQ,aAAcL,KAAKE,MAAMJ,mBA/BjC,EAoCnBQ,qBAAuB,WACrB,EAAKT,SAAS,CACZE,gBAAiB,EAAKG,MAAMH,iBAC3B,WACCC,KAAKf,MAAMkB,kBAAkBH,KAAKE,MAAMH,gBACxCN,aAAaY,QAAQ,YAAaL,KAAKE,MAAMH,oBAtCjD,EAAKG,MAAQ,CACXJ,eAAe,EACfC,gBAAgB,GALD,E,qDA+CjB,IAAIQ,EAAoBP,KAAKE,MAAMJ,cAAX,UAA8BU,IAAaC,iBAA3C,YAA+DD,IAAaE,yBAA5E,UAA2GF,IAAaC,kBAC5IE,EAAqBX,KAAKE,MAAMH,eAAX,UAA+BS,IAAaC,iBAA5C,YAAgED,IAAaE,yBAA7E,UAA4GF,IAAaC,kBAElJ,OACE,gCACE,8CACA,6BACE,0CACA,yBAAKvB,UAAS,UAAKsB,IAAaI,wBAC9B,yBACE1B,UAAWqB,EACXM,QAASb,KAAKI,qBAEd,wCAEF,yBACElB,UAAWyB,EACXE,QAASb,KAAKM,sBAEd,gD,GApEOQ,a,yCCuINC,E,kDApIb,WAAY9B,GAAQ,IAAD,8BACjB,cAAMA,IAWRM,kBAAoB,WAGlByB,IAAMC,IAFS,0CAGZC,MAAK,SAAAC,GACJ,EAAKtB,SAAS,CACZuB,aAAcD,EAASE,KAAKC,QAC5BC,eAAe,OAGlBC,OAAM,SAAAC,GACL,EAAK5B,SAAS,CACZ6B,aAAcD,EACdF,eAAe,QAzBJ,EA8BnBI,mBAAqB,SAACC,EAAWC,GAC/B,IAAIT,EAAe,EAAKlB,MAAMkB,aAE9B,QAAkCU,IAA9BF,EAAUG,kBAAkCF,EAAUN,cAAe,CACvE,IAEIS,EAAcZ,EAAaa,QAAO,SAAUC,GAC9C,OAAOA,EAAGC,IAAIC,IAAM,IAAMF,EAAGC,IAAIC,IAAM,MAGrCC,EAAajB,EAAaa,QAAO,SAAUC,GAC7C,OAAOA,EAAGC,IAAIC,IAAM,MAGlBE,EAAYlB,EAAaa,QAAO,SAAUC,GAC5C,OAAOA,EAAGC,IAAIC,IAAM,MAGtB,EAAKvC,SAAS,CACZ0C,kBAfa,GAeeC,OAAOR,EAAaK,EAAYC,KAIhE,QAAmCR,IAA/BF,EAAUa,mBAAmCZ,EAAUN,cAAe,CAExE,IAAImB,EAAW,YAAItB,GAAcuB,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEE,SAASC,KAAOF,EAAEC,SAASC,MAAaH,EAAEE,SAASC,OAASF,EAAEC,SAASC,MAAUH,EAAEE,SAAS5C,MAAQ2C,EAAEC,SAAS5C,MAA5E,GAAgG,KAEtL,EAAKL,SAAS,CACZmD,iBAAkBN,MAvDtB,EAAKxC,MAAQ,CACXkB,aAAc,GACdmB,kBAAmB,GACnBS,iBAAkB,GAClBzB,eAAe,EACfG,kBAAcI,GARC,E,qDAiEjB,IAEImB,EAFAlB,EAAkB/B,KAAKf,MAAM8C,gBAC7BU,EAAmBzC,KAAKf,MAAMwD,iBAmBlC,OAhBwB,IAApBV,GACFkB,EAAajD,KAAKE,MAAMkB,aAEpBqB,IACFQ,EAAajD,KAAKE,MAAM8C,oBAEG,IAApBjB,GACTkB,EAAajD,KAAKE,MAAMqC,mBAEC,IAArBE,IACFQ,EAAajD,KAAKE,MAAM8C,mBAG1BC,EAAajD,KAAKE,MAAMkB,aAIxB,6BAASlC,UAAS,UAAKgE,IAAeC,YAElCnD,KAAKE,MAAMkB,aAAagC,OACpBH,EAAWI,MAAM,EAAG,IAAIC,KAAI,SAACC,EAAMC,GACnC,IAAIC,EAUJ,OAPEA,EADEF,EAAKpB,IAAIC,IAAM,GACV,UAAMc,IAAeQ,SACnBH,EAAKpB,IAAIC,IAAM,IAAMmB,EAAKpB,IAAIC,IAAM,GACtC,UAAMc,IAAeS,WAErB,UAAMT,IAAeU,UAI5B,yBAAK1E,UAAS,UAAKgE,IAAeW,iBAAmBL,IAAKA,GACxD,yBAAKtE,UAAS,UAAKgE,IAAeY,WAApB,YAAkCL,IAC9C,gCACE,yBAAKM,IAAKR,EAAKS,QAAQC,MAAOC,IAAG,UAAKX,EAAKY,KAAKC,MAAf,YAAwBb,EAAKY,KAAKE,SAErE,yBAAKnF,UAAS,UAAKgE,IAAeoB,aAChC,4BACE,uCAASf,EAAKY,KAAKI,MAAnB,aAA6BhB,EAAKY,KAAKC,MAAvC,YAAgDb,EAAKY,KAAKE,OAC1D,6BAAMd,EAAKpB,IAAIC,MAEjB,iCACE,uCACMmB,EAAKT,SAASC,KADpB,aAC6BQ,EAAKT,SAAS5C,MAD3C,aACqDqD,EAAKT,SAAS0B,YAGrE,yBAAKtF,UAAS,UAAKgE,IAAeuB,cAC/BlB,EAAKmB,aAOhB,U,GA9HS5D,aCoCR6D,E,kDAjCb,WAAY1F,GAAQ,IAAD,8BACjB,cAAMA,IAQR2F,uBAAyB,SAAC3F,GACxB,EAAKY,SAAS,CAAEkC,gBAAiB9C,KAVhB,EAanB4F,wBAA0B,SAAC5F,GACzB,EAAKY,SAAS,CAAE4C,iBAAkBxD,KAXlC,EAAKiB,MAAQ,CACX6B,qBAAiBD,EACjBW,sBAAkBX,GALH,E,qDAkBjB,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACE7B,iBAAkBD,KAAK4E,uBACvBzE,kBAAmBH,KAAK6E,0BAE1B,kBAAC,EAAD,CACE9C,gBAAiB/B,KAAKE,MAAM6B,gBAC5BU,iBAAkBzC,KAAKE,MAAMuC,wB,GA5BrB3B,aCOEgE,QACW,cAA7BC,OAAOjC,SAASkC,UAEe,UAA7BD,OAAOjC,SAASkC,UAEhBD,OAAOjC,SAASkC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvE,MAAK,SAAAwE,GACJA,EAAaC,gBAEdnE,OAAM,SAAAC,GACLmE,QAAQnE,MAAMA,EAAMoE,c","file":"static/js/main.217400e1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Wrapper_wrapper__2gcWR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"UserCard_container__KjLn0\",\"card__container\":\"UserCard_card__container__10T6l\",\"card__desc\":\"UserCard_card__desc__2yz51\",\"card__item\":\"UserCard_card__item__1pg_h\",\"card__email\":\"UserCard_card__email__4MCfG\",\"bg__red\":\"UserCard_bg__red__37Uay\",\"bg__green\":\"UserCard_bg__green__1sCSd\",\"bg__blue\":\"UserCard_bg__blue__2qDC7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navigation__container\":\"Header_navigation__container__1troj\",\"navigation__item\":\"Header_navigation__item__3Usg1\",\"navigation__item_active\":\"Header_navigation__item_active__uLOQh\"};","import React from 'react';\nimport StylesWrapper from './Wrapper.module.scss';\n\nconst Wrapper = (props) => (\n  <main className={`${StylesWrapper.wrapper}`}>\n    {props.children}\n  </main>\n)\n\nexport default Wrapper\n","import React, { Component } from 'react';\nimport StylesHeader from './Header.module.scss';\n\nclass Header extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      btnColorState: false,\n      btnCitiesState: false,\n    }\n  }\n\n  componentDidMount = () => {\n    let getColorStateFromStorage = localStorage.getItem('colorState');\n    let getCitiesStateFromStorage = localStorage.getItem('cityState');\n    let isColorStateTrue = (getColorStateFromStorage === 'true');\n    let isCitiesStateTrue = (getCitiesStateFromStorage === 'true');\n\n    if (getColorStateFromStorage !== null) {\n      this.setState({\n        btnColorState: isColorStateTrue,\n        btnCitiesState: isCitiesStateTrue\n      }, function() {\n          this.props.filterColorState(this.state.btnColorState);\n          this.props.filterCitiesState(this.state.btnCitiesState);\n      })\n    }\n  }\n\n  handleBtnColorClick = () => {\n    this.setState({ \n        btnColorState: !this.state.btnColorState \n      }, function() {\n        this.props.filterColorState(this.state.btnColorState); \n        localStorage.setItem('colorState', this.state.btnColorState);\n      }\n    );\n  }\n\n  handleBtnCitiesClick = () => {\n    this.setState({ \n      btnCitiesState: !this.state.btnCitiesState \n    }, function() {\n        this.props.filterCitiesState(this.state.btnCitiesState);\n        localStorage.setItem('cityState', this.state.btnCitiesState);\n      }\n    );\n  }\n \n  render() {\n    let btnColorClassName = this.state.btnColorState ? `${StylesHeader.navigation__item} ${StylesHeader.navigation__item_active}` : `${StylesHeader.navigation__item}`;\n    let btnCitiesClassName = this.state.btnCitiesState ? `${StylesHeader.navigation__item} ${StylesHeader.navigation__item_active}` : `${StylesHeader.navigation__item}`;\n\n    return (\n      <header>\n        <h1>User Directory</h1>\n        <div>\n          <h5>Filter By:</h5>\n          <div className={`${StylesHeader.navigation__container}`}>\n            <div\n              className={btnColorClassName}\n              onClick={this.handleBtnColorClick}\n            >\n              <span>Color</span>\n            </div>\n            <div\n              className={btnCitiesClassName}\n              onClick={this.handleBtnCitiesClick}\n            >\n              <span>Cities</span>\n            </div>\n          </div>\n        </div>\n      </header>\n    )\n  }\n}\n\nexport default Header\n","import React, { Component } from 'react';\nimport StylesUserCard from './UserCard.module.scss';\nimport axios from 'axios';\n\nclass UserCard extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      originalData: [],\n      sortedDataByColor: [],\n      sortedDataByCity: [],\n      isDataFetched: false,\n      errorMessage: undefined\n    }\n  }\n\n  componentDidMount = () => {\n    const apiURL = 'https://randomuser.me/api/?results=100';\n\n    axios.get(apiURL)\n      .then(response => {\n        this.setState({\n          originalData: response.data.results,\n          isDataFetched: true,\n        })\n      })\n      .catch(error => {\n        this.setState({\n          errorMessage: error,\n          isDataFetched: false,\n        })\n      });\n  }\n\n  componentDidUpdate = (prevProps, prevState) => {\n    let originalData = this.state.originalData;\n\n    if (prevProps.isColorSelected !== undefined && !prevState.isDataFetched) {\n      let sortData = [];\n\n      let getAgeGreen = originalData.filter(function (el) {\n        return el.dob.age > 20 && el.dob.age < 57\n      });\n\n      let getAgeBlue = originalData.filter(function (el) {\n        return el.dob.age > 56\n      });\n\n      let getAgeRed = originalData.filter(function (el) {\n        return el.dob.age < 21\n      });\n\n      this.setState({\n        sortedDataByColor: sortData.concat(getAgeGreen, getAgeBlue, getAgeRed)\n      })\n    }\n\n    if (prevProps.isCitiesSelected !== undefined && !prevState.isDataFetched) {\n\n      let sortData = [...originalData].sort((a, b) => (a.location.city > b.location.city) ? 1 : (a.location.city === b.location.city) ? ((a.location.state > b.location.state) ? 1 : -1) : -1);\n\n      this.setState({\n        sortedDataByCity: sortData\n      });\n    }\n\n  }\n\n  render() {\n    let isColorSelected = this.props.isColorSelected;\n    let isCitiesSelected = this.props.isCitiesSelected;\n    let dataSource;\n\n    if (isColorSelected === false) {\n      dataSource = this.state.originalData;\n\n      if (isCitiesSelected) {\n        dataSource = this.state.sortedDataByCity;\n      }\n    } else if (isColorSelected === true) {\n      dataSource = this.state.sortedDataByColor;\n      \n      if (isCitiesSelected === true) {\n        dataSource = this.state.sortedDataByCity;\n      }\n    } else {\n      dataSource = this.state.originalData;\n    }\n\n    return (\n      <section className={`${StylesUserCard.container}`}>\n        {\n          this.state.originalData.length\n            ? dataSource.slice(0, 10).map((user, key) => {\n              let bgColor;\n\n              if (user.dob.age < 21) {\n                bgColor = `${StylesUserCard.bg__red}`;\n              } else if (user.dob.age > 20 && user.dob.age < 57) {\n                bgColor = `${StylesUserCard.bg__green}`;\n              } else {\n                bgColor = `${StylesUserCard.bg__blue}`;\n              }\n\n              return (\n                <div className={`${StylesUserCard.card__container}`} key={key}>\n                  <div className={`${StylesUserCard.card__item} ${bgColor}`}>\n                    <figure>\n                      <img src={user.picture.large} alt={`${user.name.first} ${user.name.last}`} />\n                    </figure>\n                    <div className={`${StylesUserCard.card__desc}`}>\n                      <h6>\n                        <div>{`${user.name.title}. ${user.name.first} ${user.name.last}`}</div>\n                        <div>{user.dob.age}</div>\n                      </h6>\n                      <address>\n                        <div>\n                          {`${user.location.city}, ${user.location.state}, ${user.location.postcode}`}\n                        </div>\n                      </address>\n                      <div className={`${StylesUserCard.card__email}`}>\n                        {user.email}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )\n            })\n            : null\n        }\n      </section>\n    )\n  }\n\n}\n\nexport default UserCard\n","import React, { Component } from 'react';\nimport Wrapper from './components/Wrapper/Wrapper';\nimport Header from './components/Header/Header';\nimport UserCard from './components/UserCard/UserCard';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      isColorSelected: undefined,\n      isCitiesSelected: undefined\n    }\n  }\n\n  handleColorStateChange = (props) => {\n    this.setState({ isColorSelected: props });\n  }\n\n  handleCitiesStateChange = (props) => {\n    this.setState({ isCitiesSelected: props });\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Header \n          filterColorState={this.handleColorStateChange} \n          filterCitiesState={this.handleCitiesStateChange} \n        />\n        <UserCard\n          isColorSelected={this.state.isColorSelected}\n          isCitiesSelected={this.state.isCitiesSelected}\n        />\n      </Wrapper>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './assets/css/styles.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}